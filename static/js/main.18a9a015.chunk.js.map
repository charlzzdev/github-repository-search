{"version":3,"sources":["components/Header.js","components/RepoLoader.js","components/convertDate.js","components/CommitFeed.js","components/CommentSection.js","components/IssuesFeed.js","components/RepoModal.js","components/Repository.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","style","padding","onSubmit","e","preventDefault","query","target","value","trim","fetchRepos","reset","Input","type","placeholder","icon","RepoLoader","Dimmer","active","inverted","Loader","size","convertDate","date","Date","toLocaleString","CommitFeed","undefined","data","commits","components_RepoLoader","noCommits","message","Feed","map","commit","commitDetails","authorAvailable","author","Event","key","Math","random","Label","src","avatar_url","alt","Content","Summary","User","href","html_url","name","Meta","CommentSection","_ref","comments","length","Comment","Group","comment","id","Avatar","user","Author","as","login","author_association","marginLeft","Metadata","created_at","Text","body","Actions","Action","IssuesFeed","_useState","useState","_useState2","Object","slicedToArray","setComments","issues","noIssues","issue","image","site_admin","color","title","state","locked","updated_at","Extra","text","split","forEach","part","i","push","background","borderRadius","renderBody","pull_request","onClick","url","comments_url","fetch","then","res","json","elements_Header_Header","dividing","components_CommentSection","RepoModal","Modal","open","onClose","close","repoName","Icon","float","cursor","detail","components_CommitFeed","components_IssuesFeed","showFeed","Repository","repo","_useReducer","useReducer","newState","objectSpread","_useReducer2","setState","_handleDetails","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","full_name","defineProperty","stop","this","apply","arguments","openModal","handleModalState","_x","handleDetails","concat","Grid","Column","mobile","computer","display","alignItems","justifyContent","Card","private","Description","description","Button","primary","animated","data-url","clone_url","input","document","querySelector","getAttribute","appendChild","select","execCommand","removeChild","innerHTML","children","setTimeout","visible","pointerEvents","hidden","components_RepoModal","App","repos","loading","error","_fetchRepos","items","catch","err","Container","textAlign","components_Header","centered","marginTop","components_Repository","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18a9a015.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nconst Header = (props) => {\r\n      const handleSubmit = (e) => {\r\n            e.preventDefault();\r\n            const query = e.target[0].value.trim();\r\n            if(query !== ''){\r\n                  props.fetchRepos(query);\r\n                  e.target.reset();\r\n            }\r\n      }\r\n\r\n      return (\r\n            <header>\r\n                  <h1 style={{padding: \"1rem 0\"}}>Search Github Repositories</h1>\r\n                  <form onSubmit={handleSubmit}>\r\n                        <Input type=\"text\" placeholder=\"Topic\" icon=\"search\"/>\r\n                  </form>\r\n            </header>\r\n      )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst RepoLoader = () => {\r\n      return <Dimmer active inverted><Loader size=\"massive\">Loading</Loader></Dimmer>;\r\n}\r\n\r\nexport default RepoLoader;\r\n","const convertDate = (date) => new Date(date).toLocaleString();\r\nexport default convertDate;\r\n","import React from 'react';\r\nimport { Feed } from 'semantic-ui-react';\r\nimport RepoLoader from './RepoLoader';\r\nimport convertDate from './convertDate';\r\n \r\nconst CommitFeed = (props) => {\r\n      if(props.data === undefined || props.data.commits === undefined) return <RepoLoader />;\r\n      let noCommits = props.data.commits.message ? true : false;\r\n\r\n      return (\r\n            <Feed>\r\n                  {\r\n                        noCommits ? 'No commits were found.' : props.data.commits.map(commit => {\r\n                              const commitDetails = commit.commit;\r\n                              const authorAvailable = commit.author !== null;\r\n                              return (\r\n                                    <Feed.Event key={Math.random()}>\r\n                                          <Feed.Label>\r\n                                                <img src={authorAvailable ? commit.author.avatar_url : ''} alt=\"The person's avatar\" />\r\n                                          </Feed.Label>\r\n                                          <Feed.Content>\r\n                                                <Feed.Summary>\r\n                                                      <Feed.User href={authorAvailable ? commit.author.html_url : '#'} target={authorAvailable ? 'blank' : ''}>{commitDetails.author.name}</Feed.User> committed on\r\n                                                      <Feed.Date>{convertDate(commitDetails.author.date)}</Feed.Date>\r\n                                                </Feed.Summary>\r\n                                                <Feed.Meta>\r\n                                                      {commitDetails.message}\r\n                                                </Feed.Meta>\r\n                                          </Feed.Content>\r\n                                    </Feed.Event>\r\n                              );\r\n                        })\r\n                  }\r\n            </Feed>\r\n      )\r\n}\r\n\r\nexport default CommitFeed;\r\n ","import React from 'react';\r\nimport { Comment, Label } from 'semantic-ui-react';\r\nimport convertDate from './convertDate';\r\n\r\nconst CommentSection = ({comments}) => {\r\n      return (\r\n            comments.length > 0 ? (\r\n                  <Comment.Group>\r\n                        {\r\n                              comments.map(comment => \r\n                                    <Comment key={comment.id}>\r\n                                          <Comment.Avatar src={comment.user.avatar_url} />\r\n                                          <Comment.Content>\r\n                                                <Comment.Author as=\"a\" href={comment.user.html_url} target=\"blank\">\r\n                                                      {comment.user.login}\r\n                                                      {\r\n                                                            comment.author_association !== 'NONE' ?\r\n                                                            <Label style={{marginLeft: '0.5rem'}}>{comment.author_association}</Label> : null\r\n                                                      }\r\n                                                </Comment.Author>\r\n                                                <Comment.Metadata>\r\n                                                      <div>{convertDate(comment.created_at)}</div>\r\n                                                </Comment.Metadata>\r\n                                                <Comment.Text>{comment.body}</Comment.Text>\r\n                                                <Comment.Actions>\r\n                                                      <Comment.Action href={comment.html_url} target=\"blank\">Reply</Comment.Action>\r\n                                                </Comment.Actions>\r\n                                          </Comment.Content>\r\n                                    </Comment>\r\n                              )\r\n                        }\r\n                  </Comment.Group>\r\n            ) : 'No issue selected for comments.'\r\n      )\r\n}\r\n\r\nexport default CommentSection;","import React, { useState } from 'react';\r\nimport { Feed, Label, Header } from 'semantic-ui-react';\r\nimport RepoLoader from './RepoLoader';\r\nimport convertDate from './convertDate';\r\nimport CommentSection from './CommentSection';\r\n\r\nconst IssuesFeed = (props) => {\r\n      const [comments, setComments] = useState([]);\r\n\r\n      if(props.data === undefined || props.data.issues === undefined) return <RepoLoader />;\r\n      let noIssues = props.data.issues.length === 0 ? true : false;\r\n      \r\n      const renderBody = (body) => {\r\n            let text = [];\r\n            body.split(\"```\").forEach((part, i) => {\r\n                  if(i % 2 !== 0 && part !== ''){\r\n                        text.push(\r\n                              <pre key={i} style={{\r\n                                    background: '#f5f5f5',\r\n                                    padding: '0.5rem',\r\n                                    borderRadius: '7px'\r\n                              }}>{part}</pre>\r\n                        );\r\n                  } else {\r\n                        text.push(<div key={i}>{part}</div>);\r\n                  }\r\n            });\r\n            return text;\r\n      }\r\n      \r\n\r\n      const getComments = (url) => {\r\n            fetch(url)\r\n                  .then(res => res.json())\r\n                  .then(data => setComments(data));\r\n      }\r\n\r\n      return (\r\n            <Feed>\r\n                  {\r\n                        props.data.issues.map(issue => {\r\n                              return <Feed.Event key={issue.id}>\r\n                                    <Feed.Label image={issue.user.avatar_url} />\r\n                                    <Feed.Content>\r\n                                          <Feed.Summary>\r\n                                                <a href={issue.user.html_url}>{issue.user.login} {\r\n                                                      issue.user.site_admin ? <Label color=\"blue\">Admin</Label> : null\r\n                                                }</a> posted an issue: {issue.title} &nbsp;\r\n                                                <Label color={\r\n                                                      issue.state === 'open' ? 'green' : 'red'\r\n                                                }>{issue.state}</Label>\r\n                                                {\r\n                                                      issue.locked ? <Label color=\"red\">locked</Label> : null\r\n                                                }\r\n                                                <Feed.Date>Created: {convertDate(issue.created_at)} | Updated: {convertDate(issue.updated_at)}</Feed.Date>\r\n                                          </Feed.Summary>\r\n                                          <Feed.Extra text>\r\n                                                {renderBody(issue.body)}\r\n                                          </Feed.Extra>\r\n                                          <Feed.Meta>\r\n                                                {\r\n                                                      issue.pull_request !== undefined ?\r\n                                                      <a href={issue.pull_request.html_url} target=\"blank\">Pull</a> : null\r\n                                                }\r\n                                                <a href=\"#comments\" onClick={() => getComments(issue.comments_url)}>Comments ({issue.comments})</a>\r\n                                          </Feed.Meta>\r\n                                    </Feed.Content>\r\n                              </Feed.Event>\r\n                        })\r\n                  }\r\n\r\n                  {\r\n                        noIssues ? 'No issues were found.' : null\r\n                  }\r\n                  \r\n                  <Header as=\"h1\" id=\"comments\" dividing>Comments</Header>\r\n                  <CommentSection comments={comments} />\r\n            </Feed>\r\n      )\r\n}\r\n\r\nexport default IssuesFeed;\r\n","import React from 'react';\r\nimport { Modal, Icon } from 'semantic-ui-react';\r\nimport CommitFeed from './CommitFeed';\r\nimport IssuesFeed from './IssuesFeed';\r\n\r\nconst RepoModal = (props) => {\r\n      const showFeed = () => {\r\n            switch(props.detail){\r\n                  case 'commits':\r\n                        return <CommitFeed data={props.data} />;\r\n                  case 'issues':\r\n                        return <IssuesFeed data={props.data} />;\r\n                  default:\r\n                        return null;\r\n            }\r\n      }\r\n\r\n      return (\r\n            <Modal size={'large'} open={props.open} onClose={() => props.close()}>\r\n                  <Modal.Header>{props.repoName} <Icon name=\"close\" style={{float: 'right', cursor: 'pointer'}} onClick={props.close}></Icon></Modal.Header>\r\n                  <Modal.Content>\r\n                        {\r\n                              showFeed()\r\n                        }\r\n                  </Modal.Content>\r\n            </Modal>\r\n      )\r\n}\r\n\r\nexport default RepoModal;\r\n","import React, { useReducer } from 'react';\r\nimport { Button, Card, Label, Grid } from 'semantic-ui-react';\r\nimport RepoModal from './RepoModal';\r\n\r\nconst Repository = ({ repo }) => {\r\n      const [state, setState] = useReducer((state, newState) => ({...state, ...newState}), {});\r\n\r\n      const handleCopy = (e) => {\r\n            const input = document.createElement('input');\r\n            const body = document.querySelector('body');\r\n            input.value = e.target.getAttribute('data-url');\r\n            body.appendChild(input);\r\n            input.select();\r\n            document.execCommand('copy');\r\n            body.removeChild(input);\r\n            const target = e.target;\r\n            const innerHTML = target.innerHTML;\r\n            target.children[1].innerHTML = 'Copied!';\r\n            setTimeout(() => target.innerHTML = innerHTML, 2000);\r\n      }\r\n\r\n      async function handleDetails(url) {\r\n            const detail = url.split('/')[6];\r\n            if(state[repo.full_name] === undefined || state[repo.full_name][detail] === undefined){\r\n                  await fetch(url)\r\n                        .then(res => res.json())\r\n                        .then(data => {\r\n                              setState({\r\n                                    [repo.full_name]: {\r\n                                          ...state[repo.full_name],\r\n                                          [detail]: data\r\n                                    }\r\n                              });\r\n                        });\r\n            }\r\n      }\r\n\r\n      const openModal = (detail) => {\r\n            handleModalState(detail);\r\n            handleDetails(`${repo.url}/${detail}`);\r\n      }\r\n\r\n      const handleModalState = (detail) => setState({openModal: !state.openModal, detail});\r\n\r\n      return (\r\n            <Grid.Column mobile={16} computer={5} style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n                  <Card>\r\n                        <Card.Content>\r\n                              <Card.Header><a href={repo.html_url} target=\"blank\"> {repo.name} </a><Label size=\"mini\" color=\"green\">{repo.private ? 'private' : 'public'}</Label></Card.Header>\r\n                              <Card.Meta>{repo.full_name}</Card.Meta>\r\n                              <Card.Description>{repo.description}</Card.Description>\r\n                        </Card.Content>\r\n                        <Card.Content>\r\n                              <Button.Group primary>\r\n                                    <Button onClick={() => openModal('commits')}>\r\n                                          Commits\r\n                                    </Button>\r\n                                    <Button onClick={() => openModal('issues')}>\r\n                                          Issues\r\n                                    </Button>\r\n                                    <Button animated=\"fade\" data-url={repo.clone_url} onClick={handleCopy}>\r\n                                          <Button.Content visible style={{pointerEvents: 'none'}}>Clone</Button.Content>\r\n                                          <Button.Content hidden style={{pointerEvents: 'none'}}>Copy Link</Button.Content>\r\n                                    </Button>\r\n                              </Button.Group>\r\n                              <RepoModal open={state.openModal} data={state[repo.full_name]} repoName={repo.full_name} close={handleModalState} detail={state.detail} />\r\n                        </Card.Content>\r\n                  </Card>\r\n            </Grid.Column>\r\n      );\r\n}\r\n\r\nexport default Repository;","import React, { useReducer } from 'react';\nimport Header from './components/Header';\nimport Repository from './components/Repository';\nimport { Container, Grid } from 'semantic-ui-react';\nimport RepoLoader from './components/RepoLoader';\n\nconst App = () => {\n      const initialState = {\n            repos: [],\n            loading: false,\n            error: false\n      };\n      const [state, setState] = useReducer((state, newState) => ({...state, ...newState}), initialState);\n\n      async function fetchRepos(query) {\n            setState({ loading: true });\n            await fetch(`https://api.github.com/search/repositories?q=${query}&per_page=3`)\n                  .then(res => res.json())\n                  .then(data => {\n                        setState({\n                              loading: false,\n                              repos: data.items,\n                              error: false\n                        });\n                  })\n                  .catch(err => {\n                        setState({\n                              loading: false,\n                              error: true\n                        });\n                  });\n      }\n\n      return (\n            <Container textAlign=\"center\">\n                  <Header fetchRepos={fetchRepos}/>\n                  {\n                        state.loading ? <RepoLoader /> : null\n                  }\n                  {\n                        state.error ? <h1 style={{textAlign: \"center\"}}>Error: failed retrieving repositories</h1> : null\n                  }\n                  <Grid centered style={{marginTop: \"1rem\"}}>\n                        {\n                              state.repos.map(repo => <Repository repo={repo} key={Math.random()} />)\n                        }\n                  </Grid>\n            </Container>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}