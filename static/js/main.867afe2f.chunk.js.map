{"version":3,"sources":["components/Header.js","components/RepoLoader.js","components/CommitFeed.js","components/IssuesFeed.js","components/RepoModal.js","components/Repository.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","style","padding","onSubmit","e","preventDefault","query","target","value","trim","fetchRepos","reset","Input","type","placeholder","icon","RepoLoader","Dimmer","active","inverted","Loader","size","CommitFeed","Fragment","undefined","data","commits","Feed","map","commit","commitDetails","date","Date","author","authorAvailable","Event","key","Math","random","Label","src","avatar_url","alt","Content","Summary","User","href","html_url","name","toLocaleString","Meta","message","components_RepoLoader","IssuesFeed","RepoModal","Modal","open","onClose","close","repoName","Icon","float","cursor","onClick","detail","components_CommitFeed","components_IssuesFeed","showFeed","Repository","_ref","repo","_useReducer","useReducer","state","newState","Object","objectSpread","_useReducer2","slicedToArray","setState","_handleDetails","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","split","full_name","fetch","then","res","json","defineProperty","stop","this","apply","arguments","openModal","handleModalState","_x","handleDetails","concat","Grid","Column","mobile","computer","display","alignItems","justifyContent","Card","color","private","Description","description","Button","Group","primary","animated","data-url","clone_url","input","document","body","querySelector","getAttribute","appendChild","select","execCommand","removeChild","innerHTML","children","setTimeout","visible","pointerEvents","hidden","components_RepoModal","App","repos","loading","error","_fetchRepos","items","catch","err","Container","textAlign","components_Header","centered","marginTop","components_Repository","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.867afe2f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nconst Header = (props) => {\r\n      const handleSubmit = (e) => {\r\n            e.preventDefault();\r\n            const query = e.target[0].value.trim();\r\n            if(query !== ''){\r\n                  props.fetchRepos(query);\r\n                  e.target.reset();\r\n            }\r\n      }\r\n\r\n      return (\r\n            <header>\r\n                  <h1 style={{padding: \"1rem 0\"}}>Search Github Repositories</h1>\r\n                  <form onSubmit={handleSubmit}>\r\n                        <Input type=\"text\" placeholder=\"Topic\" icon=\"search\"/>\r\n                  </form>\r\n            </header>\r\n      )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst RepoLoader = () => {\r\n      return <Dimmer active inverted><Loader size=\"massive\">Loading</Loader></Dimmer>;\r\n}\r\n\r\nexport default RepoLoader;\r\n","import React from 'react';\r\nimport { Feed } from 'semantic-ui-react';\r\nimport RepoLoader from './RepoLoader';\r\n \r\nconst CommitFeed = (props) => {\r\n      return (\r\n            <>\r\n                  {\r\n                        props.data !== undefined && props.data.commits !== undefined ? <Feed>\r\n                              {\r\n                                    props.data.commits.map(commit => {\r\n                                          const commitDetails = commit.commit;\r\n                                          const date = new Date(commitDetails.author.date);\r\n                                          const authorAvailable = commit.author !== null;\r\n                                          return (\r\n                                                <Feed.Event key={Math.random()}>\r\n                                                      <Feed.Label>\r\n                                                            <img src={authorAvailable ? commit.author.avatar_url : ''} alt=\"The person's avatar\" />\r\n                                                      </Feed.Label>\r\n                                                      <Feed.Content>\r\n                                                            <Feed.Summary>\r\n                                                                  <Feed.User href={authorAvailable ? commit.author.html_url : '#'} target={authorAvailable ? 'blank' : ''}>{commitDetails.author.name}</Feed.User> committed on\r\n                                                                  <Feed.Date>{date.toLocaleString()}</Feed.Date>\r\n                                                            </Feed.Summary>\r\n                                                            <Feed.Meta>\r\n                                                                  {commitDetails.message}\r\n                                                            </Feed.Meta>\r\n                                                      </Feed.Content>\r\n                                                </Feed.Event>\r\n                                          );\r\n                                    })\r\n                              }\r\n                        </Feed> : <RepoLoader />\r\n                  }\r\n            </>\r\n      )\r\n}\r\n\r\nexport default CommitFeed;\r\n ","import React from 'react';\r\n\r\nconst IssuesFeed = () => {\r\n      return (\r\n            <div>\r\n                  issuesfeed\r\n            </div>\r\n     )\r\n}\r\n\r\nexport default IssuesFeed;\r\n","import React from 'react';\r\nimport { Modal, Icon } from 'semantic-ui-react';\r\nimport CommitFeed from './CommitFeed';\r\nimport IssuesFeed from './IssuesFeed';\r\n\r\nconst RepoModal = (props) => {\r\n      const showFeed = () => {\r\n            switch(props.detail){\r\n                  case 'commits':\r\n                        return <CommitFeed data={props.data} />;\r\n                  case 'issues':\r\n                        return <IssuesFeed data={props.data} />;\r\n                  default:\r\n                        return null;\r\n            }\r\n      }\r\n\r\n      return (\r\n            <Modal size={'large'} open={props.open} onClose={() => props.close()}>\r\n                  <Modal.Header>{props.repoName} <Icon name=\"close\" style={{float: 'right', cursor: 'pointer'}} onClick={props.close}></Icon></Modal.Header>\r\n                  <Modal.Content>\r\n                        {\r\n                              showFeed()\r\n                        }\r\n                  </Modal.Content>\r\n            </Modal>\r\n      )\r\n}\r\n\r\nexport default RepoModal;\r\n","import React, { useReducer } from 'react';\r\nimport { Button, Card, Label, Grid } from 'semantic-ui-react';\r\nimport RepoModal from './RepoModal';\r\n\r\nconst Repository = ({ repo }) => {\r\n      const [state, setState] = useReducer((state, newState) => ({...state, ...newState}), {});\r\n\r\n      const handleCopy = (e) => {\r\n            const input = document.createElement('input');\r\n            const body = document.querySelector('body');\r\n            input.value = e.target.getAttribute('data-url');\r\n            body.appendChild(input);\r\n            input.select();\r\n            document.execCommand('copy');\r\n            body.removeChild(input);\r\n            const target = e.target;\r\n            const innerHTML = target.innerHTML;\r\n            target.children[1].innerHTML = 'Copied!';\r\n            setTimeout(() => target.innerHTML = innerHTML, 2000);\r\n      }\r\n\r\n      async function handleDetails(url) {\r\n            const detail = url.split('/')[6];\r\n            if(state[repo.full_name] === undefined || state[repo.full_name][detail] === undefined){\r\n                  await fetch(url)\r\n                        .then(res => res.json())\r\n                        .then(data => {\r\n                              setState({\r\n                                    [repo.full_name]: {\r\n                                          ...state[repo.full_name],\r\n                                          [detail]: data\r\n                                    }\r\n                              });\r\n                        });\r\n            }\r\n      }\r\n\r\n      const openModal = (detail) => {\r\n            handleModalState(detail);\r\n            handleDetails(`${repo.url}/${detail}`);\r\n      }\r\n\r\n      const handleModalState = (detail) => setState({openModal: !state.openModal, detail});\r\n\r\n      return (\r\n            <Grid.Column mobile={16} computer={5} style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n                  <Card>\r\n                        <Card.Content>\r\n                              <Card.Header><a href={repo.html_url} target=\"blank\"> {repo.name} </a><Label size=\"mini\" color=\"green\">{repo.private ? 'private' : 'public'}</Label></Card.Header>\r\n                              <Card.Meta>{repo.full_name}</Card.Meta>\r\n                              <Card.Description>{repo.description}</Card.Description>\r\n                        </Card.Content>\r\n                        <Card.Content>\r\n                              <Button.Group primary>\r\n                                    <Button onClick={() => openModal('commits')}>\r\n                                          Commits\r\n                                    </Button>\r\n                                    <Button onClick={() => openModal('issues')}>\r\n                                          Issues\r\n                                    </Button>\r\n                                    <Button animated=\"fade\" data-url={repo.clone_url} onClick={handleCopy}>\r\n                                          <Button.Content visible style={{pointerEvents: 'none'}}>Clone</Button.Content>\r\n                                          <Button.Content hidden style={{pointerEvents: 'none'}}>Copy Link</Button.Content>\r\n                                    </Button>\r\n                              </Button.Group>\r\n                              <RepoModal open={state.openModal} data={state[repo.full_name]} repoName={repo.full_name} close={handleModalState} detail={state.detail} />\r\n                        </Card.Content>\r\n                  </Card>\r\n            </Grid.Column>\r\n      );\r\n}\r\n\r\nexport default Repository;","import React, { useReducer } from 'react';\nimport Header from './components/Header';\nimport Repository from './components/Repository';\nimport { Container, Grid } from 'semantic-ui-react';\nimport RepoLoader from './components/RepoLoader';\n\nconst App = () => {\n      const initialState = {\n            repos: [],\n            loading: false,\n            error: false\n      };\n      const [state, setState] = useReducer((state, newState) => ({...state, ...newState}), initialState);\n\n      async function fetchRepos(query) {\n            setState({ loading: true });\n            await fetch(`https://api.github.com/search/repositories?q=${query}&per_page=3`)\n                  .then(res => res.json())\n                  .then(data => {\n                        setState({\n                              loading: false,\n                              repos: data.items,\n                              error: false\n                        });\n                  })\n                  .catch(err => {\n                        setState({\n                              loading: false,\n                              error: true\n                        });\n                  });\n      }\n\n      return (\n            <Container textAlign=\"center\">\n                  <Header fetchRepos={fetchRepos}/>\n                  {\n                        state.loading ? <RepoLoader /> : null\n                  }\n                  {\n                        state.error ? <h1 style={{textAlign: \"center\"}}>Error: failed retrieving repositories</h1> : null\n                  }\n                  <Grid centered style={{marginTop: \"1rem\"}}>\n                        {\n                              state.repos.map(repo => <Repository repo={repo} key={Math.random()} />)\n                        }\n                  </Grid>\n            </Container>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}