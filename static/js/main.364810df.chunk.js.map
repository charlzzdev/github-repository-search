{"version":3,"sources":["components/Header.js","components/RepoLoader.js","components/convertDate.js","components/CommitFeed.js","components/IssuesFeed.js","components/RepoModal.js","components/Repository.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","style","padding","onSubmit","e","preventDefault","query","target","value","trim","fetchRepos","reset","Input","type","placeholder","icon","RepoLoader","Dimmer","active","inverted","Loader","size","convertDate","date","Date","toLocaleString","CommitFeed","Fragment","undefined","data","commits","Feed","map","commit","commitDetails","authorAvailable","author","Event","key","Math","random","Label","src","avatar_url","alt","Content","Summary","User","href","html_url","name","Meta","message","components_RepoLoader","IssuesFeed","issues","noIssues","length","issue","id","image","user","login","site_admin","color","title","state","locked","created_at","updated_at","Extra","text","body","pull_request","comments_url","comments","RepoModal","Modal","open","onClose","close","repoName","Icon","float","cursor","onClick","detail","components_CommitFeed","components_IssuesFeed","showFeed","Repository","_ref","repo","_useReducer","useReducer","newState","Object","objectSpread","_useReducer2","slicedToArray","setState","_handleDetails","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","split","full_name","fetch","then","res","json","defineProperty","stop","this","apply","arguments","openModal","handleModalState","_x","handleDetails","concat","Grid","Column","mobile","computer","display","alignItems","justifyContent","Card","private","Description","description","Button","Group","primary","animated","data-url","clone_url","input","document","querySelector","getAttribute","appendChild","select","execCommand","removeChild","innerHTML","children","setTimeout","visible","pointerEvents","hidden","components_RepoModal","App","repos","loading","error","_fetchRepos","items","catch","err","Container","textAlign","components_Header","centered","marginTop","components_Repository","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.364810df.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nconst Header = (props) => {\r\n      const handleSubmit = (e) => {\r\n            e.preventDefault();\r\n            const query = e.target[0].value.trim();\r\n            if(query !== ''){\r\n                  props.fetchRepos(query);\r\n                  e.target.reset();\r\n            }\r\n      }\r\n\r\n      return (\r\n            <header>\r\n                  <h1 style={{padding: \"1rem 0\"}}>Search Github Repositories</h1>\r\n                  <form onSubmit={handleSubmit}>\r\n                        <Input type=\"text\" placeholder=\"Topic\" icon=\"search\"/>\r\n                  </form>\r\n            </header>\r\n      )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst RepoLoader = () => {\r\n      return <Dimmer active inverted><Loader size=\"massive\">Loading</Loader></Dimmer>;\r\n}\r\n\r\nexport default RepoLoader;\r\n","const convertDate = (date) => new Date(date).toLocaleString();\r\nexport default convertDate;\r\n","import React from 'react';\r\nimport { Feed } from 'semantic-ui-react';\r\nimport RepoLoader from './RepoLoader';\r\nimport convertDate from './convertDate';\r\n \r\nconst CommitFeed = (props) => {\r\n      return (\r\n            <>\r\n                  {\r\n                        props.data !== undefined && props.data.commits !== undefined ? <Feed>\r\n                              {\r\n                                    props.data.commits.map(commit => {\r\n                                          const commitDetails = commit.commit;\r\n                                          const authorAvailable = commit.author !== null;\r\n                                          return (\r\n                                                <Feed.Event key={Math.random()}>\r\n                                                      <Feed.Label>\r\n                                                            <img src={authorAvailable ? commit.author.avatar_url : ''} alt=\"The person's avatar\" />\r\n                                                      </Feed.Label>\r\n                                                      <Feed.Content>\r\n                                                            <Feed.Summary>\r\n                                                                  <Feed.User href={authorAvailable ? commit.author.html_url : '#'} target={authorAvailable ? 'blank' : ''}>{commitDetails.author.name}</Feed.User> committed on\r\n                                                                  <Feed.Date>{convertDate(commitDetails.author.date)}</Feed.Date>\r\n                                                            </Feed.Summary>\r\n                                                            <Feed.Meta>\r\n                                                                  {commitDetails.message}\r\n                                                            </Feed.Meta>\r\n                                                      </Feed.Content>\r\n                                                </Feed.Event>\r\n                                          );\r\n                                    })\r\n                              }\r\n                        </Feed> : <RepoLoader />\r\n                  }\r\n            </>\r\n      )\r\n}\r\n\r\nexport default CommitFeed;\r\n ","import React from 'react';\r\nimport { Feed, Label } from 'semantic-ui-react';\r\nimport RepoLoader from './RepoLoader';\r\nimport convertDate from './convertDate';\r\n\r\nconst IssuesFeed = (props) => {\r\n      if(props.data === undefined || props.data.issues === undefined) return <RepoLoader />;\r\n      let noIssues = props.data.issues.length === 0 ? true : false;\r\n\r\n      return (\r\n            <Feed>\r\n                  {\r\n                        props.data.issues.map(issue => \r\n                              <Feed.Event key={issue.id}>\r\n                                    <Feed.Label image={issue.user.avatar_url} />\r\n                                    <Feed.Content>\r\n                                          <Feed.Summary>\r\n                                                <a href={issue.user.html_url}>{issue.user.login} {\r\n                                                      issue.user.site_admin ? <Label color=\"blue\">Admin</Label> : null\r\n                                                }</a> posted an issue: {issue.title} &nbsp;\r\n                                                <Label color={\r\n                                                      issue.state === 'open' ? 'green' : 'red'\r\n                                                }>{issue.state}</Label>\r\n                                                {\r\n                                                      issue.locked ? <Label color=\"red\">locked</Label> : null\r\n                                                }\r\n                                                <Feed.Date>Created: {convertDate(issue.created_at)} | Updated: {convertDate(issue.updated_at)}</Feed.Date>\r\n                                          </Feed.Summary>\r\n                                          <Feed.Extra text>\r\n                                                {issue.body}\r\n                                          </Feed.Extra>\r\n                                          <Feed.Meta>\r\n                                                {\r\n                                                      issue.pull_request !== undefined ?\r\n                                                      <a href={issue.pull_request.html_url} target=\"blank\">Pull</a> : null\r\n                                                }\r\n                                                <a href={issue.comments_url}>Comments ({issue.comments})</a>\r\n                                          </Feed.Meta>\r\n                                    </Feed.Content>\r\n                              </Feed.Event>\r\n                        )\r\n                  }\r\n                  \r\n                  {\r\n                        noIssues ? 'No issues were found.' : null\r\n                  }\r\n            </Feed>\r\n      )\r\n}\r\n\r\nexport default IssuesFeed;\r\n","import React from 'react';\r\nimport { Modal, Icon } from 'semantic-ui-react';\r\nimport CommitFeed from './CommitFeed';\r\nimport IssuesFeed from './IssuesFeed';\r\n\r\nconst RepoModal = (props) => {\r\n      const showFeed = () => {\r\n            switch(props.detail){\r\n                  case 'commits':\r\n                        return <CommitFeed data={props.data} />;\r\n                  case 'issues':\r\n                        return <IssuesFeed data={props.data} />;\r\n                  default:\r\n                        return null;\r\n            }\r\n      }\r\n\r\n      return (\r\n            <Modal size={'large'} open={props.open} onClose={() => props.close()}>\r\n                  <Modal.Header>{props.repoName} <Icon name=\"close\" style={{float: 'right', cursor: 'pointer'}} onClick={props.close}></Icon></Modal.Header>\r\n                  <Modal.Content>\r\n                        {\r\n                              showFeed()\r\n                        }\r\n                  </Modal.Content>\r\n            </Modal>\r\n      )\r\n}\r\n\r\nexport default RepoModal;\r\n","import React, { useReducer } from 'react';\r\nimport { Button, Card, Label, Grid } from 'semantic-ui-react';\r\nimport RepoModal from './RepoModal';\r\n\r\nconst Repository = ({ repo }) => {\r\n      const [state, setState] = useReducer((state, newState) => ({...state, ...newState}), {});\r\n\r\n      const handleCopy = (e) => {\r\n            const input = document.createElement('input');\r\n            const body = document.querySelector('body');\r\n            input.value = e.target.getAttribute('data-url');\r\n            body.appendChild(input);\r\n            input.select();\r\n            document.execCommand('copy');\r\n            body.removeChild(input);\r\n            const target = e.target;\r\n            const innerHTML = target.innerHTML;\r\n            target.children[1].innerHTML = 'Copied!';\r\n            setTimeout(() => target.innerHTML = innerHTML, 2000);\r\n      }\r\n\r\n      async function handleDetails(url) {\r\n            const detail = url.split('/')[6];\r\n            if(state[repo.full_name] === undefined || state[repo.full_name][detail] === undefined){\r\n                  await fetch(url)\r\n                        .then(res => res.json())\r\n                        .then(data => {\r\n                              setState({\r\n                                    [repo.full_name]: {\r\n                                          ...state[repo.full_name],\r\n                                          [detail]: data\r\n                                    }\r\n                              });\r\n                        });\r\n            }\r\n      }\r\n\r\n      const openModal = (detail) => {\r\n            handleModalState(detail);\r\n            handleDetails(`${repo.url}/${detail}`);\r\n      }\r\n\r\n      const handleModalState = (detail) => setState({openModal: !state.openModal, detail});\r\n\r\n      return (\r\n            <Grid.Column mobile={16} computer={5} style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n                  <Card>\r\n                        <Card.Content>\r\n                              <Card.Header><a href={repo.html_url} target=\"blank\"> {repo.name} </a><Label size=\"mini\" color=\"green\">{repo.private ? 'private' : 'public'}</Label></Card.Header>\r\n                              <Card.Meta>{repo.full_name}</Card.Meta>\r\n                              <Card.Description>{repo.description}</Card.Description>\r\n                        </Card.Content>\r\n                        <Card.Content>\r\n                              <Button.Group primary>\r\n                                    <Button onClick={() => openModal('commits')}>\r\n                                          Commits\r\n                                    </Button>\r\n                                    <Button onClick={() => openModal('issues')}>\r\n                                          Issues\r\n                                    </Button>\r\n                                    <Button animated=\"fade\" data-url={repo.clone_url} onClick={handleCopy}>\r\n                                          <Button.Content visible style={{pointerEvents: 'none'}}>Clone</Button.Content>\r\n                                          <Button.Content hidden style={{pointerEvents: 'none'}}>Copy Link</Button.Content>\r\n                                    </Button>\r\n                              </Button.Group>\r\n                              <RepoModal open={state.openModal} data={state[repo.full_name]} repoName={repo.full_name} close={handleModalState} detail={state.detail} />\r\n                        </Card.Content>\r\n                  </Card>\r\n            </Grid.Column>\r\n      );\r\n}\r\n\r\nexport default Repository;","import React, { useReducer } from 'react';\nimport Header from './components/Header';\nimport Repository from './components/Repository';\nimport { Container, Grid } from 'semantic-ui-react';\nimport RepoLoader from './components/RepoLoader';\n\nconst App = () => {\n      const initialState = {\n            repos: [],\n            loading: false,\n            error: false\n      };\n      const [state, setState] = useReducer((state, newState) => ({...state, ...newState}), initialState);\n\n      async function fetchRepos(query) {\n            setState({ loading: true });\n            await fetch(`https://api.github.com/search/repositories?q=${query}&per_page=3`)\n                  .then(res => res.json())\n                  .then(data => {\n                        setState({\n                              loading: false,\n                              repos: data.items,\n                              error: false\n                        });\n                  })\n                  .catch(err => {\n                        setState({\n                              loading: false,\n                              error: true\n                        });\n                  });\n      }\n\n      return (\n            <Container textAlign=\"center\">\n                  <Header fetchRepos={fetchRepos}/>\n                  {\n                        state.loading ? <RepoLoader /> : null\n                  }\n                  {\n                        state.error ? <h1 style={{textAlign: \"center\"}}>Error: failed retrieving repositories</h1> : null\n                  }\n                  <Grid centered style={{marginTop: \"1rem\"}}>\n                        {\n                              state.repos.map(repo => <Repository repo={repo} key={Math.random()} />)\n                        }\n                  </Grid>\n            </Container>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}